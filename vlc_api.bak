"""
VLC Player Control API

A FastAPI application that provides endpoints to control VLC media player
for fullscreen video playback.
"""

import logging
import os
import subprocess
import time
from enum import Enum
from typing import Dict, Optional, Union

import uvicorn
from fastapi import FastAPI, HTTPException, BackgroundTasks, status
from pydantic import BaseModel, Field

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("vlc_api.log")
    ]
)

logger = logging.getLogger("vlc-api")

# Define application
app = FastAPI(
    title="VLC Player Control API",
    description="API for controlling VLC media player via HTTP endpoints",
    version="1.0.0"
)

# VLC Process configuration
DEFAULT_VLC_COMMAND = [
    "/usr/bin/cvlc",
    "--no-osd",
    "--fullscreen",
    "--loop",
    "--no-video-title-show",
    "--no-sub-autodetect-file",
    "--quiet",
    "--drop-late-frames",
    "--skip-frames"
]

# Global process reference
vlc_process: Optional[subprocess.Popen] = None
vlc_status = {
    "running": False,
    "video_path": None,
    "start_time": None,
    "pid": None,
    "error": None
}


class PlayerStatus(str, Enum):
    """Enum for player status"""
    PLAYING = "playing"
    STOPPED = "stopped"
    ERROR = "error"


class VideoRequest(BaseModel):
    """Request model for playing a video"""
    video_path: str = Field(..., description="Path to the video file")
    loop: bool = Field(True, description="Whether to loop the video")
    fullscreen: bool = Field(True, description="Whether to play in fullscreen mode")


class PlayerResponse(BaseModel):
    """Response model for player status"""
    status: PlayerStatus
    video_path: Optional[str] = None
    pid: Optional[int] = None
    uptime: Optional[float] = None
    error: Optional[str] = None


def build_vlc_command(video_path: str, loop: bool = True, fullscreen: bool = True) -> list:
    """
    Build the VLC command with the specified options
    
    Args:
        video_path: Path to the video file
        loop: Whether to loop the video
        fullscreen: Whether to play in fullscreen mode
        
    Returns:
        List of command arguments
    """
    cmd = DEFAULT_VLC_COMMAND.copy()
    
    # Modify options based on parameters
    if not loop:
        cmd.remove("--loop")
    
    if not fullscreen:
        cmd.remove("--fullscreen")
    
    # Add the video path
    cmd.append(video_path)
    
    return cmd


def start_vlc_process(video_path: str, loop: bool = True, fullscreen: bool = True) -> subprocess.Popen:
    """
    Start the VLC process
    
    Args:
        video_path: Path to the video file
        loop: Whether to loop the video
        fullscreen: Whether to play in fullscreen mode
        
    Returns:
        Subprocess.Popen instance
    """
    global vlc_process, vlc_status
    
    # Check if video file exists
    if not os.path.exists(video_path):
        error_msg = f"Video file not found: {video_path}"
        logger.error(error_msg)
        vlc_status["error"] = error_msg
        raise FileNotFoundError(error_msg)
    
    try:
        cmd = build_vlc_command(video_path, loop, fullscreen)
        logger.info(f"Starting VLC with command: {' '.join(cmd)}")
        
        # Start the VLC process
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Update status
        vlc_status["running"] = True
        vlc_status["video_path"] = video_path
        vlc_status["start_time"] = time.time()
        vlc_status["pid"] = process.pid
        vlc_status["error"] = None
        
        logger.info(f"VLC process started with PID {process.pid}")
        return process
    
    except Exception as e:
        error_msg = f"Failed to start VLC process: {str(e)}"
        logger.error(error_msg)
        vlc_status["error"] = error_msg
        vlc_status["running"] = False
        raise RuntimeError(error_msg)


def stop_vlc_process() -> bool:
    """
    Stop the VLC process
    
    Returns:
        True if process was stopped, False otherwise
    """
    global vlc_process, vlc_status
    
    if vlc_process is None:
        logger.info("No VLC process to stop")
        return False
    
    logger.info(f"Stopping VLC process with PID {vlc_process.pid}")
    
    try:
        # Check if process is still running
        if vlc_process.poll() is None:
            # Try to terminate gracefully first
            vlc_process.terminate()
            
            # Wait for process to terminate
            try:
                vlc_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                # Force kill if terminate doesn't work
                logger.warning(f"VLC process {vlc_process.pid} did not terminate, killing forcefully")
                vlc_process.kill()
        
        # Update status
        vlc_status["running"] = False
        vlc_status["video_path"] = None
        vlc_status["start_time"] = None
        vlc_status["pid"] = None
        
        logger.info("VLC process stopped")
        return True
    
    except Exception as e:
        error_msg = f"Error stopping VLC process: {str(e)}"
        logger.error(error_msg)
        vlc_status["error"] = error_msg
        return False
    finally:
        vlc_process = None


def monitor_vlc_process(background_tasks: BackgroundTasks) -> None:
    """
    Monitor the VLC process in the background
    
    If the process crashes or exits unexpectedly, update the status
    """
    global vlc_process, vlc_status
    
    if vlc_process is None:
        return
    
    def _monitor():
        global vlc_process, vlc_status
        pid = vlc_process.pid if vlc_process else None
        logger.info(f"Starting to monitor VLC process with PID {pid}")
        
        try:
            # Wait for process to complete
            if vlc_process and vlc_process.poll() is None:
                exit_code = vlc_process.wait()
                logger.info(f"VLC process exited with code {exit_code}")
                
                # Read any error output
                if exit_code != 0:
                    errors = vlc_process.stderr.read() if vlc_process.stderr else "Unknown error"
                    vlc_status["error"] = f"VLC process exited with code {exit_code}: {errors}"
                
                # Update status
                vlc_status["running"] = False
                vlc_status["pid"] = None
                vlc_process = None
        
        except Exception as e:
            logger.error(f"Error monitoring VLC process: {str(e)}")
            vlc_status["error"] = str(e)
            vlc_status["running"] = False
            vlc_process = None
    
    background_tasks.add_task(_monitor)


@app.get("/", response_model=Dict[str, str])
async def root():
    """Root endpoint"""
    return {"message": "VLC Player Control API - Use /docs for API documentation"}


@app.get("/health", status_code=status.HTTP_200_OK)
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "api_version": app.version}


@app.get("/player/status", response_model=PlayerResponse)
async def get_player_status():
    """Get the current status of the player"""
    global vlc_process, vlc_status
    
    # Calculate uptime if player is running
    uptime = None
    if vlc_status["start_time"] is not None:
        uptime = time.time() - vlc_status["start_time"]
    
    # Determine player status
    if vlc_status["running"]:
        # Make sure the process is actually still running
        if vlc_process and vlc_process.poll() is not None:
            # Process has exited unexpectedly
            vlc_status["running"] = False
            vlc_status["error"] = f"VLC process exited with code {vlc_process.returncode}"
            status_value = PlayerStatus.ERROR
        else:
            status_value = PlayerStatus.PLAYING
    elif vlc_status["error"]:
        status_value = PlayerStatus.ERROR
    else:
        status_value = PlayerStatus.STOPPED
    
    return {
        "status": status_value,
        "video_path": vlc_status["video_path"],
        "pid": vlc_status["pid"],
        "uptime": uptime,
        "error": vlc_status["error"]
    }


@app.post("/player/play", response_model=PlayerResponse)
async def play_video(request: VideoRequest, background_tasks: BackgroundTasks):
    """
    Start playing a video with VLC
    
    Args:
        request: Video request with path and options
        background_tasks: FastAPI background tasks
        
    Returns:
        Player status response
    """
    global vlc_process, vlc_status
    
    # Stop any existing playback
    if vlc_process is not None:
        stop_vlc_process()
    
    try:
        # Start new playback
        vlc_process = start_vlc_process(
            request.video_path,
            loop=request.loop,
            fullscreen=request.fullscreen
        )
        
        # Monitor the process in the background
        monitor_vlc_process(background_tasks)
        
        uptime = 0  # Just started
        
        return {
            "status": PlayerStatus.PLAYING,
            "video_path": vlc_status["video_path"],
            "pid": vlc_status["pid"],
            "uptime": uptime,
            "error": None
        }
    
    except FileNotFoundError as e:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=str(e)
        )
    
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@app.post("/player/stop", response_model=PlayerResponse)
async def stop_video():
    """
    Stop the currently playing video
    
    Returns:
        Player status response
    """
    global vlc_process, vlc_status
    
    # Stop the playback
    stopped = stop_vlc_process()
    
    if not stopped and vlc_status["error"]:
        # There was an error stopping the playback
        return {
            "status": PlayerStatus.ERROR,
            "video_path": None,
            "pid": None,
            "uptime": None,
            "error": vlc_status["error"]
        }
    
    return {
        "status": PlayerStatus.STOPPED,
        "video_path": None,
        "pid": None,
        "uptime": None,
        "error": None
    }


@app.post("/player/restart", response_model=PlayerResponse)
async def restart_video(background_tasks: BackgroundTasks):
    """
    Restart the currently playing video
    
    Returns:
        Player status response
    """
    global vlc_process, vlc_status
    
    # Check if a video is currently playing
    if not vlc_status["running"] or not vlc_status["video_path"]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="No video is currently playing"
        )
    
    # Store the current video path
    video_path = vlc_status["video_path"]
    
    # Stop the current playback
    stop_vlc_process()
    
    # Start playback with the same video
    vlc_process = start_vlc_process(video_path)
    
    # Monitor the process in the background
    monitor_vlc_process(background_tasks)
    
    uptime = 0  # Just restarted
    
    return {
        "status": PlayerStatus.PLAYING,
        "video_path": vlc_status["video_path"],
        "pid": vlc_status["pid"],
        "uptime": uptime,
        "error": None
    }


if __name__ == "__main__":
    # Run the server
    uvicorn.run(
        "vlc_api:app",
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )

